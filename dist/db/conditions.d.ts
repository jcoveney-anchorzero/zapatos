import { SQLFragment } from './core';
import type { Whereable } from 'zapatos/schema';
export declare const isNull: SQLFragment<boolean, never>;
export declare const isNotNull: SQLFragment<boolean, never>;
export declare const isTrue: SQLFragment<boolean, never>;
export declare const isNotTrue: SQLFragment<boolean, never>;
export declare const isFalse: SQLFragment<boolean, never>;
export declare const isNotFalse: SQLFragment<boolean, never>;
export declare const isUnknown: SQLFragment<boolean, never>;
export declare const isNotUnknown: SQLFragment<boolean, never>;
export declare const isDistinctFrom: <T>(a: T) => SQLFragment<boolean, T>;
export declare const isNotDistinctFrom: <T>(a: T) => SQLFragment<boolean, T>;
export declare const eq: <T>(a: T) => SQLFragment<boolean | null, T>;
export declare const ne: <T>(a: T) => SQLFragment<boolean | null, T>;
export declare const gt: <T>(a: T) => SQLFragment<boolean | null, T>;
export declare const gte: <T>(a: T) => SQLFragment<boolean | null, T>;
export declare const lt: <T>(a: T) => SQLFragment<boolean | null, T>;
export declare const lte: <T>(a: T) => SQLFragment<boolean | null, T>;
export declare const between: <T>(a: T, b: T) => SQLFragment<boolean | null, T>;
export declare const betweenSymmetric: <T>(a: T, b: T) => SQLFragment<boolean | null, T>;
export declare const notBetween: <T>(a: T, b: T) => SQLFragment<boolean | null, T>;
export declare const notBetweenSymmetric: <T>(a: T, b: T) => SQLFragment<boolean | null, T>;
export declare const like: <T extends string>(a: T) => SQLFragment<boolean | null, T>;
export declare const notLike: <T extends string>(a: T) => SQLFragment<boolean | null, T>;
export declare const ilike: <T extends string>(a: T) => SQLFragment<boolean | null, T>;
export declare const notIlike: <T extends string>(a: T) => SQLFragment<boolean | null, T>;
export declare const similarTo: <T extends string>(a: T) => SQLFragment<boolean | null, T>;
export declare const notSimilarTo: <T extends string>(a: T) => SQLFragment<boolean | null, T>;
export declare const reMatch: <T extends string>(a: T) => SQLFragment<boolean | null, T>;
export declare const reImatch: <T extends string>(a: T) => SQLFragment<boolean | null, T>;
export declare const notReMatch: <T extends string>(a: T) => SQLFragment<boolean | null, T>;
export declare const notReImatch: <T extends string>(a: T) => SQLFragment<boolean | null, T>;
export declare const isIn: <T>(a: readonly T[]) => SQLFragment<any[], never> | SQLFragment<boolean | null, T>;
export declare const isNotIn: <T>(a: readonly T[]) => SQLFragment<any[], never> | SQLFragment<boolean | null, T>;
export declare const or: <T>(...conditions: SQLFragment<any, T>[] | Whereable[]) => SQLFragment<boolean | null, T>;
export declare const and: <T>(...conditions: Whereable[] | SQLFragment<any, T>[]) => SQLFragment<boolean | null, T>;
export declare const not: <T>(condition: Whereable | SQLFragment<any, T>) => SQLFragment<boolean | null, T>;
type PluralisingIntervalUnit = 'microsecond' | 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year' | 'decade';
type IntervalUnit = PluralisingIntervalUnit | `${PluralisingIntervalUnit}s` | 'century' | 'centuries' | 'millennium' | 'millennia';
export declare const fromNow: (n: number, unit?: IntervalUnit) => SQLFragment<any[], never>;
export declare const after: <T>(a: T) => SQLFragment<boolean | null, T>;
export declare const before: <T>(a: T) => SQLFragment<boolean | null, T>;
export declare const now: SQLFragment<any[], never>;
export declare const add: <T extends number | Date>(a: T) => SQLFragment<number, T>;
export declare const subtract: <T extends number | Date>(a: T) => SQLFragment<number, T>;
export {};
